java.lang
│
├── java.lang.Object
│   ├── java.lang.Thread  // Represents a thread of execution
│   │   ├── java.lang.ThreadGroup  // Manages groups of threads
│   │   └── java.lang.Runnable (Interface)  // Represents a task that can be executed by a thread
│   │       ├── java.util.concurrent.Callable (Interface)  // Similar to Runnable, but can return a result and throw a checked exception
│   │       ├── java.util.concurrent.FutureTask  // Represents a cancellable asynchronous computation
│   │       ├── java.lang.RunnableFuture (Interface)  // A Future that is Runnable
│   │       │   ├── java.util.concurrent.FutureTask
│   │       │   └── java.util.concurrent.RunnableFuture
│   │       ├── java.util.concurrent.Executor (Interface)  // Provides methods for managing termination and tracking progress of asynchronous tasks
│   │       │   ├── java.util.concurrent.ExecutorService (Interface)  // Extends Executor to provide lifecycle management methods
│   │       │   │   ├── java.util.concurrent.ThreadPoolExecutor  // A thread pool implementation of ExecutorService
│   │       │   │   └── java.util.concurrent.ScheduledExecutorService (Interface)  // Extends ExecutorService to support future and/or periodic execution of tasks
│   │       │   │       └── java.util.concurrent.ScheduledThreadPoolExecutor  // A thread pool implementation of ScheduledExecutorService
│   │       │   └── java.util.concurrent.Executors  // Factory and utility methods for Executor, ExecutorService, ScheduledExecutorService, ThreadFactory, and Callable classes
│   │       ├── java.util.concurrent.CompletableFuture  // A Future that may be explicitly completed
│   │       ├── java.util.concurrent.CountDownLatch  // A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes
│   │       ├── java.util.concurrent.CyclicBarrier  // A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point
│   │       ├── java.util.concurrent.Semaphore  // A counting semaphore
│   │       ├── java.util.concurrent.Exchanger  // A synchronization point at which threads can pair and exchange elements within pairs
│   │       └── java.util.concurrent.Phaser  // A reusable synchronization barrier
│   ├── java.util.concurrent.locks.Lock (Interface)  // Provides more extensive locking operations than can be obtained using synchronized methods and statements
│   │   ├── java.util.concurrent.locks.ReentrantLock  // A reentrant mutual exclusion lock
│   │   └── java.util.concurrent.locks.ReadWriteLock (Interface)  // Maintains a pair of associated locks, one for read-only operations and one for writing
│   │       └── java.util.concurrent.locks.ReentrantReadWriteLock  // An implementation of ReadWriteLock
│   ├── java.util.concurrent.atomic.AtomicInteger  // An int value that may be updated atomically
│   ├── java.util.concurrent.atomic.AtomicBoolean  // A boolean value that may be updated atomically
│   ├── java.util.concurrent.atomic.AtomicReference  // An object reference that may be updated atomically
│   ├── java.util.concurrent.atomic.AtomicLong  // A long value that may be updated atomically
│   ├── java.util.concurrent.Future (Interface)  // Represents the result of an asynchronous computation
│   ├── java.util.concurrent.TimeUnit  // A time unit represents time durations at a given unit of granularity and provides utility methods to convert across units
│   ├── java.util.Timer  // A facility for threads to schedule tasks for future execution in a background thread
│   └── java.util.TimerTask  // A task that can be scheduled for one-time or repeated execution by a Timer